<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        MDowvwAAAABJRU5ErkJggg==
</value>
  </data>
</root>